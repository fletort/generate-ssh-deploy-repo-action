name: 'Continuous Testing'

on:
  push:

env:
  PUBLISHING_REPO_NAME: 'generate-ssh-deploy-repo-action-test-publishing'
  PUBLISHING_REPO_ORG: 'fletort-test'
  PUBLISHED_REPO_NAME: 'generate-ssh-deploy-repo-action-test-published'
  PUBLISHED_REPO_ORG: 'fletort-test'
  TEST_UUID_FILE: test.txt

permissions:
  contents: read

jobs:
  test-action:
    name: GitHub Action Test
    runs-on: ubuntu-latest
    permissions:
      checks: write
      pull-requests: write
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Install bats
        id: install-bats
        run: ./test/install_bats.sh

      - name: Create Publishing repository
        uses: f1lander/create-repository-action@v1.0.2
        with:
          name: '${{ env.PUBLISHING_REPO_NAME }}'
          org: '${{ env.PUBLISHING_REPO_ORG }}'
          access-token: '${{ secrets.TEST_TOKEN }}'

      - name: Create Published repository
        uses: f1lander/create-repository-action@v1.0.2
        with:
          name: '${{ env.PUBLISHED_REPO_NAME }}'
          org: '${{ env.PUBLISHED_REPO_ORG }}'
          access-token: '${{ secrets.TEST_TOKEN }}' 
      
      - name: Checkout Publishing repository
        id: checkout_publishing
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PUBLISHING_REPO_ORG }}/${{ env.PUBLISHING_REPO_NAME }}
          path: ${{ env.PUBLISHING_REPO_NAME }}
          token: '${{ secrets.TEST_TOKEN }}'

      - name: Copy test workflow & content
        id: copy_content
        run: |
          cp -r test/.github ${PUBLISHING_REPO_NAME}
          uuid=$(uuidgen)
          echo $uuid > ${PUBLISHING_REPO_NAME}/${TEST_UUID_FILE}
          echo "uuid=${uuid}" >> "$GITHUB_OUTPUT"

      - name: Commit & Push changes To Publishing repository
        uses: actions-js/push@master
        with:
          github_token: '${{ secrets.TEST_TOKEN }}'
          directory: ${{ env.PUBLISHING_REPO_NAME }}
          repository: ${{ env.PUBLISHING_REPO_ORG }}/${{ env.PUBLISHING_REPO_NAME }}
        
      - name: Run Local Action
        id: run-local-action
        uses: ./
        with:
          client_repo: ${{ env.PUBLISHING_REPO_ORG }}/${{ env.PUBLISHING_REPO_NAME }}
          deploy_repo: ${{ env.PUBLISHED_REPO_ORG }}/${{ env.PUBLISHED_REPO_NAME }}
          token: '${{ secrets.TEST_TOKEN }}'

      # - name: Test Deployment (run deploying workflow)
      #   uses: peter-evans/repository-dispatch@v3
      #   with:
      #     token: ${{ secrets.TEST_TOKEN }}
      #     repository: fletort-test/generate-ssh-deploy-repo-action-test-publishing
      #     event-type: start-test

      # Dispatch an action and get the run ID and URL
      - name: Start the functional test (publishing action)
        uses: codex-/return-dispatch@v1
        id: return_dispatch
        with:
          token: ${{ secrets.TEST_TOKEN }}
          ref: main
          repo: ${{ env.PUBLISHING_REPO_NAME }}
          owner: ${{ env.PUBLISHING_REPO_ORG }}
          workflow: workflow.yml
      
      # Await Run ID ${{ steps.return_dispatch.outputs.run_id }}
      - name: Waiting end of the functional test (publishing action)
        uses: Codex-/await-remote-run@v1.0.0
        with:
          token: ${{ github.token }}
          repo: ${{ env.PUBLISHING_REPO_NAME }}
          owner: ${{ env.PUBLISHING_REPO_ORG }}
          run_id: ${{ steps.return_dispatch.outputs.run_id }}

      - name: Checkout Published repository
        id: checkout_published
        uses: actions/checkout@v4
        with:
          repository: ${{ env.PUBLISHED_REPO_ORG }}/${{ env.PUBLISHED_REPO_NAME }}
          path: ${{ env.PUBLISHED_REPO_NAME }}
          token: '${{ secrets.TEST_TOKEN }}'

      - name: Test Waited Results
        id: test-action-result
        env:
          WAITED_UUID: ${{ steps.copy_content.outputs.uuid }}
          GH_TOKEN: ${{ secrets.TEST_TOKEN }}
        run: ./test/bats/bin/bats --report-formatter junit test/test_action.bats

      - name: Clean Test Data
        if: always()
        env:
          GH_TOKEN: ${{ secrets.TEST_TOKEN }}
        run: |
          gh repo delete ${PUBLISHING_REPO_ORG}/${PUBLISHING_REPO_NAME} --yes
          gh repo delete ${PUBLISHED_REPO_ORG}/${PUBLISHED_REPO_NAME} --yes

      - name: Testspace client install & config
        id: testspace_init
        if: always() && hashFiles('report.xml') != ''
        uses: testspace-com/setup-testspace@v1
        with:
          domain: ${{github.repository_owner}}

      - name: Testspace push test content
        if: always() && (steps.test-action-result.outcome == 'success')
        run: |
          testspace "[Integ Tests]report.xml"

      - name: Publish Test Results in GitHub
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: report.xml
          check_name: 'Integ Test Results'





